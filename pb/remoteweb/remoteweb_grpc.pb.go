// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: remoteweb.proto

package remoteweb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteWebClient is the client API for RemoteWeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteWebClient interface {
	Page(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageResponse, error)
	AdminPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageResponse, error)
	File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	WebSocket(ctx context.Context, in *WebSocketRequest, opts ...grpc.CallOption) (*WebSocketResponse, error)
	Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error)
	Notifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
}

type remoteWebClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteWebClient(cc grpc.ClientConnInterface) RemoteWebClient {
	return &remoteWebClient{cc}
}

func (c *remoteWebClient) Page(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageResponse, error) {
	out := new(PageResponse)
	err := c.cc.Invoke(ctx, "/remoteweb.RemoteWeb/Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteWebClient) AdminPage(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*PageResponse, error) {
	out := new(PageResponse)
	err := c.cc.Invoke(ctx, "/remoteweb.RemoteWeb/AdminPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteWebClient) File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/remoteweb.RemoteWeb/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteWebClient) WebSocket(ctx context.Context, in *WebSocketRequest, opts ...grpc.CallOption) (*WebSocketResponse, error) {
	out := new(WebSocketResponse)
	err := c.cc.Invoke(ctx, "/remoteweb.RemoteWeb/WebSocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteWebClient) Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error) {
	out := new(TasksResponse)
	err := c.cc.Invoke(ctx, "/remoteweb.RemoteWeb/Tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteWebClient) Notifications(ctx context.Context, in *NotificationsRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, "/remoteweb.RemoteWeb/Notifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteWebServer is the server API for RemoteWeb service.
// All implementations must embed UnimplementedRemoteWebServer
// for forward compatibility
type RemoteWebServer interface {
	Page(context.Context, *PageRequest) (*PageResponse, error)
	AdminPage(context.Context, *PageRequest) (*PageResponse, error)
	File(context.Context, *FileRequest) (*FileResponse, error)
	WebSocket(context.Context, *WebSocketRequest) (*WebSocketResponse, error)
	Tasks(context.Context, *TasksRequest) (*TasksResponse, error)
	Notifications(context.Context, *NotificationsRequest) (*NotificationsResponse, error)
	mustEmbedUnimplementedRemoteWebServer()
}

// UnimplementedRemoteWebServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteWebServer struct {
}

func (UnimplementedRemoteWebServer) Page(context.Context, *PageRequest) (*PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Page not implemented")
}
func (UnimplementedRemoteWebServer) AdminPage(context.Context, *PageRequest) (*PageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPage not implemented")
}
func (UnimplementedRemoteWebServer) File(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedRemoteWebServer) WebSocket(context.Context, *WebSocketRequest) (*WebSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebSocket not implemented")
}
func (UnimplementedRemoteWebServer) Tasks(context.Context, *TasksRequest) (*TasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tasks not implemented")
}
func (UnimplementedRemoteWebServer) Notifications(context.Context, *NotificationsRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notifications not implemented")
}
func (UnimplementedRemoteWebServer) mustEmbedUnimplementedRemoteWebServer() {}

// UnsafeRemoteWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteWebServer will
// result in compilation errors.
type UnsafeRemoteWebServer interface {
	mustEmbedUnimplementedRemoteWebServer()
}

func RegisterRemoteWebServer(s grpc.ServiceRegistrar, srv RemoteWebServer) {
	s.RegisterService(&RemoteWeb_ServiceDesc, srv)
}

func _RemoteWeb_Page_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteWebServer).Page(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteweb.RemoteWeb/Page",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteWebServer).Page(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteWeb_AdminPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteWebServer).AdminPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteweb.RemoteWeb/AdminPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteWebServer).AdminPage(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteWeb_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteWebServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteweb.RemoteWeb/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteWebServer).File(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteWeb_WebSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteWebServer).WebSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteweb.RemoteWeb/WebSocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteWebServer).WebSocket(ctx, req.(*WebSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteWeb_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteWebServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteweb.RemoteWeb/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteWebServer).Tasks(ctx, req.(*TasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteWeb_Notifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteWebServer).Notifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteweb.RemoteWeb/Notifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteWebServer).Notifications(ctx, req.(*NotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteWeb_ServiceDesc is the grpc.ServiceDesc for RemoteWeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteWeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remoteweb.RemoteWeb",
	HandlerType: (*RemoteWebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Page",
			Handler:    _RemoteWeb_Page_Handler,
		},
		{
			MethodName: "AdminPage",
			Handler:    _RemoteWeb_AdminPage_Handler,
		},
		{
			MethodName: "File",
			Handler:    _RemoteWeb_File_Handler,
		},
		{
			MethodName: "WebSocket",
			Handler:    _RemoteWeb_WebSocket_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _RemoteWeb_Tasks_Handler,
		},
		{
			MethodName: "Notifications",
			Handler:    _RemoteWeb_Notifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remoteweb.proto",
}
