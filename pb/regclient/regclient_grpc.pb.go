// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: regclient.proto

package regclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegClientClient is the client API for RegClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegClientClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	AddDependent(ctx context.Context, in *AddDependentRequest, opts ...grpc.CallOption) (*AddDependentResponse, error)
	RemoveDependent(ctx context.Context, in *RemoveDependentRequest, opts ...grpc.CallOption) (*RemoveDependentResponse, error)
	RemoveRequired(ctx context.Context, in *RemoveRequiredRequest, opts ...grpc.CallOption) (*RemoveRequiredResponse, error)
	MasterGoingDown(ctx context.Context, in *MasterGoingDownRequest, opts ...grpc.CallOption) (*MasterGoingDownResponse, error)
	MasterBackUp(ctx context.Context, in *MasterBackUpRequest, opts ...grpc.CallOption) (*MasterBackUpResponse, error)
	DependentUp(ctx context.Context, in *DependentUpRequest, opts ...grpc.CallOption) (*DependentUpResponse, error)
	DependentDown(ctx context.Context, in *DependentDownRequest, opts ...grpc.CallOption) (*DependentDownResponse, error)
	RequiredUp(ctx context.Context, in *RequiredUpRequest, opts ...grpc.CallOption) (*RequiredUpResponse, error)
	RequiredDown(ctx context.Context, in *RequiredDownRequest, opts ...grpc.CallOption) (*RequiredDownResponse, error)
}

type regClientClient struct {
	cc grpc.ClientConnInterface
}

func NewRegClientClient(cc grpc.ClientConnInterface) RegClientClient {
	return &regClientClient{cc}
}

func (c *regClientClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) AddDependent(ctx context.Context, in *AddDependentRequest, opts ...grpc.CallOption) (*AddDependentResponse, error) {
	out := new(AddDependentResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/AddDependent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) RemoveDependent(ctx context.Context, in *RemoveDependentRequest, opts ...grpc.CallOption) (*RemoveDependentResponse, error) {
	out := new(RemoveDependentResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/RemoveDependent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) RemoveRequired(ctx context.Context, in *RemoveRequiredRequest, opts ...grpc.CallOption) (*RemoveRequiredResponse, error) {
	out := new(RemoveRequiredResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/RemoveRequired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) MasterGoingDown(ctx context.Context, in *MasterGoingDownRequest, opts ...grpc.CallOption) (*MasterGoingDownResponse, error) {
	out := new(MasterGoingDownResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/MasterGoingDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) MasterBackUp(ctx context.Context, in *MasterBackUpRequest, opts ...grpc.CallOption) (*MasterBackUpResponse, error) {
	out := new(MasterBackUpResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/MasterBackUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) DependentUp(ctx context.Context, in *DependentUpRequest, opts ...grpc.CallOption) (*DependentUpResponse, error) {
	out := new(DependentUpResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/DependentUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) DependentDown(ctx context.Context, in *DependentDownRequest, opts ...grpc.CallOption) (*DependentDownResponse, error) {
	out := new(DependentDownResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/DependentDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) RequiredUp(ctx context.Context, in *RequiredUpRequest, opts ...grpc.CallOption) (*RequiredUpResponse, error) {
	out := new(RequiredUpResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/RequiredUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regClientClient) RequiredDown(ctx context.Context, in *RequiredDownRequest, opts ...grpc.CallOption) (*RequiredDownResponse, error) {
	out := new(RequiredDownResponse)
	err := c.cc.Invoke(ctx, "/regClient.RegClient/RequiredDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegClientServer is the server API for RegClient service.
// All implementations must embed UnimplementedRegClientServer
// for forward compatibility
type RegClientServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	AddDependent(context.Context, *AddDependentRequest) (*AddDependentResponse, error)
	RemoveDependent(context.Context, *RemoveDependentRequest) (*RemoveDependentResponse, error)
	RemoveRequired(context.Context, *RemoveRequiredRequest) (*RemoveRequiredResponse, error)
	MasterGoingDown(context.Context, *MasterGoingDownRequest) (*MasterGoingDownResponse, error)
	MasterBackUp(context.Context, *MasterBackUpRequest) (*MasterBackUpResponse, error)
	DependentUp(context.Context, *DependentUpRequest) (*DependentUpResponse, error)
	DependentDown(context.Context, *DependentDownRequest) (*DependentDownResponse, error)
	RequiredUp(context.Context, *RequiredUpRequest) (*RequiredUpResponse, error)
	RequiredDown(context.Context, *RequiredDownRequest) (*RequiredDownResponse, error)
	mustEmbedUnimplementedRegClientServer()
}

// UnimplementedRegClientServer must be embedded to have forward compatible implementations.
type UnimplementedRegClientServer struct {
}

func (UnimplementedRegClientServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRegClientServer) AddDependent(context.Context, *AddDependentRequest) (*AddDependentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDependent not implemented")
}
func (UnimplementedRegClientServer) RemoveDependent(context.Context, *RemoveDependentRequest) (*RemoveDependentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDependent not implemented")
}
func (UnimplementedRegClientServer) RemoveRequired(context.Context, *RemoveRequiredRequest) (*RemoveRequiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRequired not implemented")
}
func (UnimplementedRegClientServer) MasterGoingDown(context.Context, *MasterGoingDownRequest) (*MasterGoingDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterGoingDown not implemented")
}
func (UnimplementedRegClientServer) MasterBackUp(context.Context, *MasterBackUpRequest) (*MasterBackUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterBackUp not implemented")
}
func (UnimplementedRegClientServer) DependentUp(context.Context, *DependentUpRequest) (*DependentUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DependentUp not implemented")
}
func (UnimplementedRegClientServer) DependentDown(context.Context, *DependentDownRequest) (*DependentDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DependentDown not implemented")
}
func (UnimplementedRegClientServer) RequiredUp(context.Context, *RequiredUpRequest) (*RequiredUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequiredUp not implemented")
}
func (UnimplementedRegClientServer) RequiredDown(context.Context, *RequiredDownRequest) (*RequiredDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequiredDown not implemented")
}
func (UnimplementedRegClientServer) mustEmbedUnimplementedRegClientServer() {}

// UnsafeRegClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegClientServer will
// result in compilation errors.
type UnsafeRegClientServer interface {
	mustEmbedUnimplementedRegClientServer()
}

func RegisterRegClientServer(s grpc.ServiceRegistrar, srv RegClientServer) {
	s.RegisterService(&RegClient_ServiceDesc, srv)
}

func _RegClient_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_AddDependent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDependentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).AddDependent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/AddDependent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).AddDependent(ctx, req.(*AddDependentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_RemoveDependent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDependentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).RemoveDependent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/RemoveDependent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).RemoveDependent(ctx, req.(*RemoveDependentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_RemoveRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).RemoveRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/RemoveRequired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).RemoveRequired(ctx, req.(*RemoveRequiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_MasterGoingDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterGoingDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).MasterGoingDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/MasterGoingDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).MasterGoingDown(ctx, req.(*MasterGoingDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_MasterBackUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterBackUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).MasterBackUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/MasterBackUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).MasterBackUp(ctx, req.(*MasterBackUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_DependentUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependentUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).DependentUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/DependentUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).DependentUp(ctx, req.(*DependentUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_DependentDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependentDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).DependentDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/DependentDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).DependentDown(ctx, req.(*DependentDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_RequiredUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequiredUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).RequiredUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/RequiredUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).RequiredUp(ctx, req.(*RequiredUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegClient_RequiredDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequiredDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegClientServer).RequiredDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regClient.RegClient/RequiredDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegClientServer).RequiredDown(ctx, req.(*RequiredDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegClient_ServiceDesc is the grpc.ServiceDesc for RegClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "regClient.RegClient",
	HandlerType: (*RegClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _RegClient_HealthCheck_Handler,
		},
		{
			MethodName: "AddDependent",
			Handler:    _RegClient_AddDependent_Handler,
		},
		{
			MethodName: "RemoveDependent",
			Handler:    _RegClient_RemoveDependent_Handler,
		},
		{
			MethodName: "RemoveRequired",
			Handler:    _RegClient_RemoveRequired_Handler,
		},
		{
			MethodName: "MasterGoingDown",
			Handler:    _RegClient_MasterGoingDown_Handler,
		},
		{
			MethodName: "MasterBackUp",
			Handler:    _RegClient_MasterBackUp_Handler,
		},
		{
			MethodName: "DependentUp",
			Handler:    _RegClient_DependentUp_Handler,
		},
		{
			MethodName: "DependentDown",
			Handler:    _RegClient_DependentDown_Handler,
		},
		{
			MethodName: "RequiredUp",
			Handler:    _RegClient_RequiredUp_Handler,
		},
		{
			MethodName: "RequiredDown",
			Handler:    _RegClient_RequiredDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regclient.proto",
}
