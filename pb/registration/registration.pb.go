// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: registration.proto

package registration

import (
	config "github.com/Tackem-org/Global/pb/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LinkType int32

const (
	LinkType_Main  LinkType = 0
	LinkType_User  LinkType = 1
	LinkType_Admin LinkType = 2
	LinkType_Top   LinkType = 3
)

// Enum value maps for LinkType.
var (
	LinkType_name = map[int32]string{
		0: "Main",
		1: "User",
		2: "Admin",
		3: "Top",
	}
	LinkType_value = map[string]int32{
		"Main":  0,
		"User":  1,
		"Admin": 2,
		"Top":   3,
	}
)

func (x LinkType) Enum() *LinkType {
	p := new(LinkType)
	*p = x
	return p
}

func (x LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_registration_proto_enumTypes[0].Descriptor()
}

func (LinkType) Type() protoreflect.EnumType {
	return &file_registration_proto_enumTypes[0]
}

func (x LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkType.Descriptor instead.
func (LinkType) EnumDescriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{0}
}

type InputType int32

const (
	InputType_None           InputType = 0
	InputType_ICheckbox      InputType = 1
	InputType_IColor         InputType = 2
	InputType_IDate          InputType = 3
	InputType_IDatetimelocal InputType = 4
	InputType_IEmail         InputType = 5
	InputType_INumber        InputType = 6
	InputType_IPassword      InputType = 7
	InputType_IRadio         InputType = 8
	InputType_IRange         InputType = 9
	InputType_ITel           InputType = 10
	InputType_IText          InputType = 11
	InputType_ITime          InputType = 12
	InputType_IUrl           InputType = 13
	InputType_TextArea       InputType = 14
	InputType_Select         InputType = 15
	InputType_Switch         InputType = 16
)

// Enum value maps for InputType.
var (
	InputType_name = map[int32]string{
		0:  "None",
		1:  "ICheckbox",
		2:  "IColor",
		3:  "IDate",
		4:  "IDatetimelocal",
		5:  "IEmail",
		6:  "INumber",
		7:  "IPassword",
		8:  "IRadio",
		9:  "IRange",
		10: "ITel",
		11: "IText",
		12: "ITime",
		13: "IUrl",
		14: "TextArea",
		15: "Select",
		16: "Switch",
	}
	InputType_value = map[string]int32{
		"None":           0,
		"ICheckbox":      1,
		"IColor":         2,
		"IDate":          3,
		"IDatetimelocal": 4,
		"IEmail":         5,
		"INumber":        6,
		"IPassword":      7,
		"IRadio":         8,
		"IRange":         9,
		"ITel":           10,
		"IText":          11,
		"ITime":          12,
		"IUrl":           13,
		"TextArea":       14,
		"Select":         15,
		"Switch":         16,
	}
)

func (x InputType) Enum() *InputType {
	p := new(InputType)
	*p = x
	return p
}

func (x InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_registration_proto_enumTypes[1].Descriptor()
}

func (InputType) Type() protoreflect.EnumType {
	return &file_registration_proto_enumTypes[1]
}

func (x InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputType.Descriptor instead.
func (InputType) EnumDescriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{1}
}

type RegisterRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ServiceName       string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceType       string                 `protobuf:"bytes,2,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	Version           *Version               `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Port              uint32                 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Multi             bool                   `protobuf:"varint,5,opt,name=multi,proto3" json:"multi,omitempty"`
	SingleRun         bool                   `protobuf:"varint,6,opt,name=single_run,json=singleRun,proto3" json:"single_run,omitempty"`
	StartActive       bool                   `protobuf:"varint,7,opt,name=start_active,json=startActive,proto3" json:"start_active,omitempty"`
	ConfigItems       []*ConfigItem          `protobuf:"bytes,8,rep,name=config_items,json=configItems,proto3" json:"config_items,omitempty"`
	RequiredServices  []*RequiredService     `protobuf:"bytes,9,rep,name=required_services,json=requiredServices,proto3" json:"required_services,omitempty"`
	WebLinkItems      []*WebLinkItem         `protobuf:"bytes,10,rep,name=web_link_items,json=webLinkItems,proto3" json:"web_link_items,omitempty"`
	AdminWebLinkItems []*AdminWebLinkItem    `protobuf:"bytes,11,rep,name=admin_web_link_items,json=adminWebLinkItems,proto3" json:"admin_web_link_items,omitempty"`
	NavItems          []*NavItem             `protobuf:"bytes,12,rep,name=nav_items,json=navItems,proto3" json:"nav_items,omitempty"`
	WebSocketItems    []*WebSocketItem       `protobuf:"bytes,13,rep,name=web_socket_items,json=webSocketItems,proto3" json:"web_socket_items,omitempty"`
	Groups            []string               `protobuf:"bytes,14,rep,name=groups,proto3" json:"groups,omitempty"`
	Permissions       []string               `protobuf:"bytes,15,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Panels            []*PanelSetup          `protobuf:"bytes,16,rep,name=panels,proto3" json:"panels,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_registration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RegisterRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *RegisterRequest) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RegisterRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegisterRequest) GetMulti() bool {
	if x != nil {
		return x.Multi
	}
	return false
}

func (x *RegisterRequest) GetSingleRun() bool {
	if x != nil {
		return x.SingleRun
	}
	return false
}

func (x *RegisterRequest) GetStartActive() bool {
	if x != nil {
		return x.StartActive
	}
	return false
}

func (x *RegisterRequest) GetConfigItems() []*ConfigItem {
	if x != nil {
		return x.ConfigItems
	}
	return nil
}

func (x *RegisterRequest) GetRequiredServices() []*RequiredService {
	if x != nil {
		return x.RequiredServices
	}
	return nil
}

func (x *RegisterRequest) GetWebLinkItems() []*WebLinkItem {
	if x != nil {
		return x.WebLinkItems
	}
	return nil
}

func (x *RegisterRequest) GetAdminWebLinkItems() []*AdminWebLinkItem {
	if x != nil {
		return x.AdminWebLinkItems
	}
	return nil
}

func (x *RegisterRequest) GetNavItems() []*NavItem {
	if x != nil {
		return x.NavItems
	}
	return nil
}

func (x *RegisterRequest) GetWebSocketItems() []*WebSocketItem {
	if x != nil {
		return x.WebSocketItems
	}
	return nil
}

func (x *RegisterRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RegisterRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *RegisterRequest) GetPanels() []*PanelSetup {
	if x != nil {
		return x.Panels
	}
	return nil
}

type Version struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Major         uint32                 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor         uint32                 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Hotfix        uint32                 `protobuf:"varint,3,opt,name=hotfix,proto3" json:"hotfix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_registration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetHotfix() uint32 {
	if x != nil {
		return x.Hotfix
	}
	return 0
}

type RegisterResponse struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Success         bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage    string                  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	BaseId          string                  `protobuf:"bytes,3,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	ServiceId       uint64                  `protobuf:"varint,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Key             string                  `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	MissingServices []*RequiredService      `protobuf:"bytes,6,rep,name=missing_services,json=missingServices,proto3" json:"missing_services,omitempty"`
	FoundServices   []*FoundRequiredService `protobuf:"bytes,7,rep,name=found_services,json=foundServices,proto3" json:"found_services,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_registration_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RegisterResponse) GetBaseId() string {
	if x != nil {
		return x.BaseId
	}
	return ""
}

func (x *RegisterResponse) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *RegisterResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RegisterResponse) GetMissingServices() []*RequiredService {
	if x != nil {
		return x.MissingServices
	}
	return nil
}

func (x *RegisterResponse) GetFoundServices() []*FoundRequiredService {
	if x != nil {
		return x.FoundServices
	}
	return nil
}

type WebLinkItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Permission    string                 `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	PostAllowed   bool                   `protobuf:"varint,3,opt,name=post_allowed,json=postAllowed,proto3" json:"post_allowed,omitempty"`
	GetDisabled   bool                   `protobuf:"varint,4,opt,name=get_disabled,json=getDisabled,proto3" json:"get_disabled,omitempty"`
	AllowedPanels []string               `protobuf:"bytes,5,rep,name=allowed_panels,json=allowedPanels,proto3" json:"allowed_panels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebLinkItem) Reset() {
	*x = WebLinkItem{}
	mi := &file_registration_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebLinkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebLinkItem) ProtoMessage() {}

func (x *WebLinkItem) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebLinkItem.ProtoReflect.Descriptor instead.
func (*WebLinkItem) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{3}
}

func (x *WebLinkItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WebLinkItem) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *WebLinkItem) GetPostAllowed() bool {
	if x != nil {
		return x.PostAllowed
	}
	return false
}

func (x *WebLinkItem) GetGetDisabled() bool {
	if x != nil {
		return x.GetDisabled
	}
	return false
}

func (x *WebLinkItem) GetAllowedPanels() []string {
	if x != nil {
		return x.AllowedPanels
	}
	return nil
}

type AdminWebLinkItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	PostAllowed   bool                   `protobuf:"varint,2,opt,name=post_allowed,json=postAllowed,proto3" json:"post_allowed,omitempty"`
	GetDisabled   bool                   `protobuf:"varint,3,opt,name=get_disabled,json=getDisabled,proto3" json:"get_disabled,omitempty"`
	AllowedPanels []string               `protobuf:"bytes,4,rep,name=allowed_panels,json=allowedPanels,proto3" json:"allowed_panels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminWebLinkItem) Reset() {
	*x = AdminWebLinkItem{}
	mi := &file_registration_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminWebLinkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminWebLinkItem) ProtoMessage() {}

func (x *AdminWebLinkItem) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminWebLinkItem.ProtoReflect.Descriptor instead.
func (*AdminWebLinkItem) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{4}
}

func (x *AdminWebLinkItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AdminWebLinkItem) GetPostAllowed() bool {
	if x != nil {
		return x.PostAllowed
	}
	return false
}

func (x *AdminWebLinkItem) GetGetDisabled() bool {
	if x != nil {
		return x.GetDisabled
	}
	return false
}

func (x *AdminWebLinkItem) GetAllowedPanels() []string {
	if x != nil {
		return x.AllowedPanels
	}
	return nil
}

type WebSocketItem struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Command           string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Permission        string                 `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	AdminOnly         bool                   `protobuf:"varint,3,opt,name=admin_only,json=adminOnly,proto3" json:"admin_only,omitempty"`
	RequiredVariables []string               `protobuf:"bytes,5,rep,name=required_variables,json=requiredVariables,proto3" json:"required_variables,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WebSocketItem) Reset() {
	*x = WebSocketItem{}
	mi := &file_registration_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebSocketItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketItem) ProtoMessage() {}

func (x *WebSocketItem) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketItem.ProtoReflect.Descriptor instead.
func (*WebSocketItem) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{5}
}

func (x *WebSocketItem) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *WebSocketItem) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *WebSocketItem) GetAdminOnly() bool {
	if x != nil {
		return x.AdminOnly
	}
	return false
}

func (x *WebSocketItem) GetRequiredVariables() []string {
	if x != nil {
		return x.RequiredVariables
	}
	return nil
}

type NavItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LinkType      LinkType               `protobuf:"varint,1,opt,name=link_type,json=linkType,proto3,enum=registration.LinkType" json:"link_type,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Icon          string                 `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Permission    string                 `protobuf:"bytes,5,opt,name=permission,proto3" json:"permission,omitempty"`
	SubLinks      []*NavItem             `protobuf:"bytes,6,rep,name=sub_links,json=subLinks,proto3" json:"sub_links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NavItem) Reset() {
	*x = NavItem{}
	mi := &file_registration_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NavItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavItem) ProtoMessage() {}

func (x *NavItem) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavItem.ProtoReflect.Descriptor instead.
func (*NavItem) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{6}
}

func (x *NavItem) GetLinkType() LinkType {
	if x != nil {
		return x.LinkType
	}
	return LinkType_Main
}

func (x *NavItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NavItem) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *NavItem) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NavItem) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *NavItem) GetSubLinks() []*NavItem {
	if x != nil {
		return x.SubLinks
	}
	return nil
}

type RequiredService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version       *Version               `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequiredService) Reset() {
	*x = RequiredService{}
	mi := &file_registration_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequiredService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredService) ProtoMessage() {}

func (x *RequiredService) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredService.ProtoReflect.Descriptor instead.
func (*RequiredService) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{7}
}

func (x *RequiredService) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequiredService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequiredService) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

type FoundRequiredService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version       *Version               `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	BaseId        string                 `protobuf:"bytes,4,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	ServiceId     uint64                 `protobuf:"varint,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Key           string                 `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Url           string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Port          uint32                 `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	SingleRun     bool                   `protobuf:"varint,9,opt,name=single_run,json=singleRun,proto3" json:"single_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FoundRequiredService) Reset() {
	*x = FoundRequiredService{}
	mi := &file_registration_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FoundRequiredService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundRequiredService) ProtoMessage() {}

func (x *FoundRequiredService) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundRequiredService.ProtoReflect.Descriptor instead.
func (*FoundRequiredService) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{8}
}

func (x *FoundRequiredService) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FoundRequiredService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FoundRequiredService) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FoundRequiredService) GetBaseId() string {
	if x != nil {
		return x.BaseId
	}
	return ""
}

func (x *FoundRequiredService) GetServiceId() uint64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *FoundRequiredService) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FoundRequiredService) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FoundRequiredService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FoundRequiredService) GetSingleRun() bool {
	if x != nil {
		return x.SingleRun
	}
	return false
}

type ConfigItem struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Key             string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultValue    string                 `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Type            config.ValueType       `protobuf:"varint,3,opt,name=type,proto3,enum=config.ValueType" json:"type,omitempty"`
	Label           string                 `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	HelpText        string                 `protobuf:"bytes,5,opt,name=help_text,json=helpText,proto3" json:"help_text,omitempty"`
	HideOnHtml      bool                   `protobuf:"varint,6,opt,name=hide_on_html,json=hideOnHtml,proto3" json:"hide_on_html,omitempty"`
	NotInConfig     bool                   `protobuf:"varint,7,opt,name=not_in_config,json=notInConfig,proto3" json:"not_in_config,omitempty"`
	RestartRequired bool                   `protobuf:"varint,8,opt,name=restart_required,json=restartRequired,proto3" json:"restart_required,omitempty"`
	InputType       InputType              `protobuf:"varint,9,opt,name=input_type,json=inputType,proto3,enum=registration.InputType" json:"input_type,omitempty"`
	Options         []string               `protobuf:"bytes,10,rep,name=options,proto3" json:"options,omitempty"`
	InputAttributes *InputAttributes       `protobuf:"bytes,11,opt,name=input_attributes,json=inputAttributes,proto3" json:"input_attributes,omitempty"`
	Buttons         []*InputButton         `protobuf:"bytes,12,rep,name=buttons,proto3" json:"buttons,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConfigItem) Reset() {
	*x = ConfigItem{}
	mi := &file_registration_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigItem) ProtoMessage() {}

func (x *ConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigItem.ProtoReflect.Descriptor instead.
func (*ConfigItem) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigItem) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ConfigItem) GetType() config.ValueType {
	if x != nil {
		return x.Type
	}
	return config.ValueType(0)
}

func (x *ConfigItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ConfigItem) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *ConfigItem) GetHideOnHtml() bool {
	if x != nil {
		return x.HideOnHtml
	}
	return false
}

func (x *ConfigItem) GetNotInConfig() bool {
	if x != nil {
		return x.NotInConfig
	}
	return false
}

func (x *ConfigItem) GetRestartRequired() bool {
	if x != nil {
		return x.RestartRequired
	}
	return false
}

func (x *ConfigItem) GetInputType() InputType {
	if x != nil {
		return x.InputType
	}
	return InputType_None
}

func (x *ConfigItem) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ConfigItem) GetInputAttributes() *InputAttributes {
	if x != nil {
		return x.InputAttributes
	}
	return nil
}

func (x *ConfigItem) GetButtons() []*InputButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

type InputAttributes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Autofocus     bool                   `protobuf:"varint,1,opt,name=autofocus,proto3" json:"autofocus,omitempty"`
	Readonly      bool                   `protobuf:"varint,2,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Disabled      bool                   `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Multiple      bool                   `protobuf:"varint,4,opt,name=multiple,proto3" json:"multiple,omitempty"`
	Required      bool                   `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
	Selected      bool                   `protobuf:"varint,6,opt,name=selected,proto3" json:"selected,omitempty"`
	Hidden        bool                   `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Other         map[string]string      `protobuf:"bytes,8,rep,name=other,proto3" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputAttributes) Reset() {
	*x = InputAttributes{}
	mi := &file_registration_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputAttributes) ProtoMessage() {}

func (x *InputAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputAttributes.ProtoReflect.Descriptor instead.
func (*InputAttributes) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{10}
}

func (x *InputAttributes) GetAutofocus() bool {
	if x != nil {
		return x.Autofocus
	}
	return false
}

func (x *InputAttributes) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *InputAttributes) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *InputAttributes) GetMultiple() bool {
	if x != nil {
		return x.Multiple
	}
	return false
}

func (x *InputAttributes) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *InputAttributes) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

func (x *InputAttributes) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *InputAttributes) GetOther() map[string]string {
	if x != nil {
		return x.Other
	}
	return nil
}

type RequiredVariable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Options       []string               `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequiredVariable) Reset() {
	*x = RequiredVariable{}
	mi := &file_registration_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequiredVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredVariable) ProtoMessage() {}

func (x *RequiredVariable) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredVariable.ProtoReflect.Descriptor instead.
func (*RequiredVariable) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{11}
}

func (x *RequiredVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequiredVariable) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type PanelLayout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	ScrollWidth   bool                   `protobuf:"varint,3,opt,name=scroll_width,json=scrollWidth,proto3" json:"scroll_width,omitempty"`
	ScrollHeight  bool                   `protobuf:"varint,4,opt,name=scroll_height,json=scrollHeight,proto3" json:"scroll_height,omitempty"`
	TitleBar      bool                   `protobuf:"varint,5,opt,name=title_bar,json=titleBar,proto3" json:"title_bar,omitempty"`
	Minimise      bool                   `protobuf:"varint,6,opt,name=minimise,proto3" json:"minimise,omitempty"`
	Close         bool                   `protobuf:"varint,7,opt,name=close,proto3" json:"close,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PanelLayout) Reset() {
	*x = PanelLayout{}
	mi := &file_registration_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PanelLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelLayout) ProtoMessage() {}

func (x *PanelLayout) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelLayout.ProtoReflect.Descriptor instead.
func (*PanelLayout) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{12}
}

func (x *PanelLayout) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PanelLayout) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PanelLayout) GetScrollWidth() bool {
	if x != nil {
		return x.ScrollWidth
	}
	return false
}

func (x *PanelLayout) GetScrollHeight() bool {
	if x != nil {
		return x.ScrollHeight
	}
	return false
}

func (x *PanelLayout) GetTitleBar() bool {
	if x != nil {
		return x.TitleBar
	}
	return false
}

func (x *PanelLayout) GetMinimise() bool {
	if x != nil {
		return x.Minimise
	}
	return false
}

func (x *PanelLayout) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type PanelSetup struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label             string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Layout            *PanelLayout           `protobuf:"bytes,4,opt,name=layout,proto3" json:"layout,omitempty"`
	AdminOnly         bool                   `protobuf:"varint,5,opt,name=admin_only,json=adminOnly,proto3" json:"admin_only,omitempty"`
	Permission        string                 `protobuf:"bytes,6,opt,name=permission,proto3" json:"permission,omitempty"`
	AllowedPaths      []string               `protobuf:"bytes,7,rep,name=allowed_paths,json=allowedPaths,proto3" json:"allowed_paths,omitempty"`
	RequiredVariables []*RequiredVariable    `protobuf:"bytes,8,rep,name=required_variables,json=requiredVariables,proto3" json:"required_variables,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PanelSetup) Reset() {
	*x = PanelSetup{}
	mi := &file_registration_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PanelSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelSetup) ProtoMessage() {}

func (x *PanelSetup) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelSetup.ProtoReflect.Descriptor instead.
func (*PanelSetup) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{13}
}

func (x *PanelSetup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PanelSetup) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PanelSetup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PanelSetup) GetLayout() *PanelLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *PanelSetup) GetAdminOnly() bool {
	if x != nil {
		return x.AdminOnly
	}
	return false
}

func (x *PanelSetup) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *PanelSetup) GetAllowedPaths() []string {
	if x != nil {
		return x.AllowedPaths
	}
	return nil
}

func (x *PanelSetup) GetRequiredVariables() []*RequiredVariable {
	if x != nil {
		return x.RequiredVariables
	}
	return nil
}

type InputButton struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Action        string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputButton) Reset() {
	*x = InputButton{}
	mi := &file_registration_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputButton) ProtoMessage() {}

func (x *InputButton) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputButton.ProtoReflect.Descriptor instead.
func (*InputButton) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{14}
}

func (x *InputButton) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InputButton) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *InputButton) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type DeregisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeregisterRequest) Reset() {
	*x = DeregisterRequest{}
	mi := &file_registration_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterRequest) ProtoMessage() {}

func (x *DeregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterRequest.ProtoReflect.Descriptor instead.
func (*DeregisterRequest) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{15}
}

type DeregisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeregisterResponse) Reset() {
	*x = DeregisterResponse{}
	mi := &file_registration_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterResponse) ProtoMessage() {}

func (x *DeregisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterResponse.ProtoReflect.Descriptor instead.
func (*DeregisterResponse) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{16}
}

func (x *DeregisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeregisterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DisconnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	mi := &file_registration_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{17}
}

type DisconnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	mi := &file_registration_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{18}
}

func (x *DisconnectResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DisconnectResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ActivateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateRequest) Reset() {
	*x = ActivateRequest{}
	mi := &file_registration_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateRequest) ProtoMessage() {}

func (x *ActivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateRequest.ProtoReflect.Descriptor instead.
func (*ActivateRequest) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{19}
}

type ActivateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateResponse) Reset() {
	*x = ActivateResponse{}
	mi := &file_registration_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateResponse) ProtoMessage() {}

func (x *ActivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateResponse.ProtoReflect.Descriptor instead.
func (*ActivateResponse) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{20}
}

func (x *ActivateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActivateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeactivateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivateRequest) Reset() {
	*x = DeactivateRequest{}
	mi := &file_registration_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateRequest) ProtoMessage() {}

func (x *DeactivateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateRequest.ProtoReflect.Descriptor instead.
func (*DeactivateRequest) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{21}
}

type DeactivateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivateResponse) Reset() {
	*x = DeactivateResponse{}
	mi := &file_registration_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateResponse) ProtoMessage() {}

func (x *DeactivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registration_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateResponse.ProtoReflect.Descriptor instead.
func (*DeactivateResponse) Descriptor() ([]byte, []int) {
	return file_registration_proto_rawDescGZIP(), []int{22}
}

func (x *DeactivateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeactivateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_registration_proto protoreflect.FileDescriptor

var file_registration_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf6, 0x05, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x61, 0x76, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6e, 0x61,
	0x76, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x77,
	0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x4d, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x74, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x6f, 0x74, 0x66, 0x69, 0x78, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x93, 0x01, 0x0a,
	0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a,
	0x07, 0x4e, 0x61, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x76, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22,
	0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x14,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x22, 0xdf, 0x03, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x4f, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x48, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x22, 0xcd,
	0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x1a, 0x38, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x13,
	0x0a, 0x11, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x12, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a,
	0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a,
	0x12, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2a, 0x32, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x6f, 0x70, 0x10, 0x03, 0x2a, 0xdf, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x44, 0x61,
	0x74, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x54, 0x65, 0x6c,
	0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x54, 0x65, 0x78, 0x74, 0x10, 0x0b, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x55, 0x72, 0x6c,
	0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72, 0x65, 0x61, 0x10, 0x0e,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0x10, 0x32, 0xa1, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x08,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x63, 0x6b, 0x65,
	0x6d, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registration_proto_rawDescOnce sync.Once
	file_registration_proto_rawDescData = file_registration_proto_rawDesc
)

func file_registration_proto_rawDescGZIP() []byte {
	file_registration_proto_rawDescOnce.Do(func() {
		file_registration_proto_rawDescData = protoimpl.X.CompressGZIP(file_registration_proto_rawDescData)
	})
	return file_registration_proto_rawDescData
}

var file_registration_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_registration_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_registration_proto_goTypes = []any{
	(LinkType)(0),                // 0: registration.LinkType
	(InputType)(0),               // 1: registration.InputType
	(*RegisterRequest)(nil),      // 2: registration.RegisterRequest
	(*Version)(nil),              // 3: registration.Version
	(*RegisterResponse)(nil),     // 4: registration.RegisterResponse
	(*WebLinkItem)(nil),          // 5: registration.WebLinkItem
	(*AdminWebLinkItem)(nil),     // 6: registration.AdminWebLinkItem
	(*WebSocketItem)(nil),        // 7: registration.WebSocketItem
	(*NavItem)(nil),              // 8: registration.NavItem
	(*RequiredService)(nil),      // 9: registration.RequiredService
	(*FoundRequiredService)(nil), // 10: registration.FoundRequiredService
	(*ConfigItem)(nil),           // 11: registration.ConfigItem
	(*InputAttributes)(nil),      // 12: registration.InputAttributes
	(*RequiredVariable)(nil),     // 13: registration.RequiredVariable
	(*PanelLayout)(nil),          // 14: registration.PanelLayout
	(*PanelSetup)(nil),           // 15: registration.PanelSetup
	(*InputButton)(nil),          // 16: registration.InputButton
	(*DeregisterRequest)(nil),    // 17: registration.DeregisterRequest
	(*DeregisterResponse)(nil),   // 18: registration.DeregisterResponse
	(*DisconnectRequest)(nil),    // 19: registration.DisconnectRequest
	(*DisconnectResponse)(nil),   // 20: registration.DisconnectResponse
	(*ActivateRequest)(nil),      // 21: registration.ActivateRequest
	(*ActivateResponse)(nil),     // 22: registration.ActivateResponse
	(*DeactivateRequest)(nil),    // 23: registration.DeactivateRequest
	(*DeactivateResponse)(nil),   // 24: registration.DeactivateResponse
	nil,                          // 25: registration.InputAttributes.OtherEntry
	nil,                          // 26: registration.InputButton.AttributesEntry
	(config.ValueType)(0),        // 27: config.ValueType
}
var file_registration_proto_depIdxs = []int32{
	3,  // 0: registration.RegisterRequest.version:type_name -> registration.Version
	11, // 1: registration.RegisterRequest.config_items:type_name -> registration.ConfigItem
	9,  // 2: registration.RegisterRequest.required_services:type_name -> registration.RequiredService
	5,  // 3: registration.RegisterRequest.web_link_items:type_name -> registration.WebLinkItem
	6,  // 4: registration.RegisterRequest.admin_web_link_items:type_name -> registration.AdminWebLinkItem
	8,  // 5: registration.RegisterRequest.nav_items:type_name -> registration.NavItem
	7,  // 6: registration.RegisterRequest.web_socket_items:type_name -> registration.WebSocketItem
	15, // 7: registration.RegisterRequest.panels:type_name -> registration.PanelSetup
	9,  // 8: registration.RegisterResponse.missing_services:type_name -> registration.RequiredService
	10, // 9: registration.RegisterResponse.found_services:type_name -> registration.FoundRequiredService
	0,  // 10: registration.NavItem.link_type:type_name -> registration.LinkType
	8,  // 11: registration.NavItem.sub_links:type_name -> registration.NavItem
	3,  // 12: registration.RequiredService.version:type_name -> registration.Version
	3,  // 13: registration.FoundRequiredService.version:type_name -> registration.Version
	27, // 14: registration.ConfigItem.type:type_name -> config.ValueType
	1,  // 15: registration.ConfigItem.input_type:type_name -> registration.InputType
	12, // 16: registration.ConfigItem.input_attributes:type_name -> registration.InputAttributes
	16, // 17: registration.ConfigItem.buttons:type_name -> registration.InputButton
	25, // 18: registration.InputAttributes.other:type_name -> registration.InputAttributes.OtherEntry
	14, // 19: registration.PanelSetup.layout:type_name -> registration.PanelLayout
	13, // 20: registration.PanelSetup.required_variables:type_name -> registration.RequiredVariable
	26, // 21: registration.InputButton.attributes:type_name -> registration.InputButton.AttributesEntry
	2,  // 22: registration.Registration.Register:input_type -> registration.RegisterRequest
	17, // 23: registration.Registration.Deregister:input_type -> registration.DeregisterRequest
	19, // 24: registration.Registration.Disconnect:input_type -> registration.DisconnectRequest
	21, // 25: registration.Registration.Activate:input_type -> registration.ActivateRequest
	23, // 26: registration.Registration.Deactivate:input_type -> registration.DeactivateRequest
	4,  // 27: registration.Registration.Register:output_type -> registration.RegisterResponse
	18, // 28: registration.Registration.Deregister:output_type -> registration.DeregisterResponse
	20, // 29: registration.Registration.Disconnect:output_type -> registration.DisconnectResponse
	22, // 30: registration.Registration.Activate:output_type -> registration.ActivateResponse
	24, // 31: registration.Registration.Deactivate:output_type -> registration.DeactivateResponse
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_registration_proto_init() }
func file_registration_proto_init() {
	if File_registration_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registration_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registration_proto_goTypes,
		DependencyIndexes: file_registration_proto_depIdxs,
		EnumInfos:         file_registration_proto_enumTypes,
		MessageInfos:      file_registration_proto_msgTypes,
	}.Build()
	File_registration_proto = out.File
	file_registration_proto_rawDesc = nil
	file_registration_proto_goTypes = nil
	file_registration_proto_depIdxs = nil
}
